//
//  WrongNoteDetailView.swift
//  Quizzly
//
//  Created by Í∞ïÎØºÏßÄ on 5/14/25.
//

import SwiftUI

// MARK: - Main View: WrongNoteDetailView
struct WrongNoteDetailView: View {
    let note: QuizNote // Ïù¥Ï†ÑÍ≥º ÎèôÏùº
    @Environment(\.dismiss) var dismiss

    // Î©îÎ™®Îäî Ïù¥ View ÎÇ¥ÏóêÏÑú StateÎ°ú Í¥ÄÎ¶¨ÌïòÍ≥†,
    // Ïã§Ï†ú Ï†ÄÏû•ÏùÄ ViewModelÏùÑ ÌÜµÌïòÍ±∞ÎÇò .onDisappearÏóêÏÑú Ï≤òÎ¶¨ ÌïÑÏöî
    @State private var memoText: String

    // ViewModel Ï£ºÏûÖ (Î©îÎ™® Ï†ÄÏû•, Îã§Ïãú ÌíÄÍ∏∞ Í∏∞Îä• Îì±ÏùÑ ÏúÑÌï¥ Ï∂îÌõÑ ÌïÑÏöî)
    // @EnvironmentObject var noteViewModel: NoteViewModel // ÏòàÏãú

    init(note: QuizNote) {
        self.note = note
        _memoText = State(initialValue: note.memo) // State Ï¥àÍ∏∞Ìôî
    }

    var body: some View {
        ScrollView(showsIndicators: false) {
            VStack(alignment: .leading, spacing: 30) {
                NoteDetailHeaderView(title: "Ïò§ÎãµÎÖ∏Ìä∏ ÏÉÅÏÑ∏") {
                    dismiss()
                }

                NoteProblemInfoSection(note: note)

                NoteChoicesSection(choices: note.choices, userAnswer: note.userAnswer, correctAnswer: note.correctAnswer)
                
                NoteExplanationSection(explanation: note.explanation)

                if !note.recommendations.isEmpty {
                    NoteRecommendationsSection(recommendations: note.recommendations)
                }

                NoteMemoSection(memoText: $memoText)

                NoteActionButtons(
                    onDismiss: { dismiss() },
                    onRetry: {
                        // TODO: "Îã§Ïãú ÌíÄÍ∏∞" Í∏∞Îä• Íµ¨ÌòÑ
                        print("Îã§Ïãú ÌíÄÍ∏∞ Î≤ÑÌäº ÌÉ≠Îê® - Í∏∞Îä• Íµ¨ÌòÑ ÌïÑÏöî. Quiz ID ÎòêÎäî Ï†ïÎ≥¥: \(note.question)")
                        // Ïòà: ÌäπÏ†ï ÌÄ¥Ï¶àÎ°ú ÎèåÏïÑÍ∞ÄÎäî Î°úÏßÅ (navigationPath ÎòêÎäî ViewModel ÏÇ¨Ïö©)
                    }
                )
            }
            .padding()
        }
        .navigationBarHidden(true) // Ìó§ÎçîÎ•º Ïª§Ïä§ÌÖÄÌïòÍ≤å ÏÇ¨Ïö©ÌïòÎØÄÎ°ú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Î∞î Ïà®ÍπÄ
        .onAppear {
            // memoTextÎäî initÏóêÏÑú Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎê®
            print("üß≠ WrongNoteDetailView loaded for question: \(note.question)")
        }
        // .onDisappear {
        //     // TODO: memoTextÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏúºÎ©¥ Ï†ÄÏû•ÌïòÎäî Î°úÏßÅ (ViewModel ÎòêÎäî modelContext ÏÇ¨Ïö©)
        //     if memoText != note.memo {
        //         print("Î©îÎ™®Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§. Ï†ÄÏû• Î°úÏßÅ ÌïÑÏöî: \(memoText)")
        //         // Ïòà: noteViewModel.updateMemo(for: note.id, newMemo: memoText)
        //     }
        // }
    }
}

// MARK: - Sub-component: NoteDetailHeaderView
fileprivate struct NoteDetailHeaderView: View {
    let title: String
    var onDismiss: () -> Void

    var body: some View {
        HStack {
            Button(action: onDismiss) {
                Image(systemName: "chevron.left")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 13, height: 13)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                    .padding(8)
                    .overlay(Circle().stroke(.gray.opacity(0.5), lineWidth: 2))
                    .clipShape(Circle())
            }
            
            Text(title)
                .font(.title3)
                .fontWeight(.bold)
            
            Spacer()
        }
    }
}

// MARK: - Sub-component: NoteProblemInfoSection (Î¨∏Ï†ú Í∏∞Î≥∏ Ï†ïÎ≥¥)
fileprivate struct NoteProblemInfoSection: View {
    let note: QuizNote

    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            HStack {
                Text(note.category)
                    .font(.caption2)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.red.opacity(0.1))
                    .foregroundColor(.red)
                    .clipShape(Capsule())
                
                Spacer()
                
                Text(note.dateAdded)
                    .font(.caption)
                    .fontWeight(.semibold)
                    .foregroundColor(.black.opacity(0.5))
            }
            Text(note.question)
                .font(.headline)
                .bold()
            
            Text("ÎÇúÏù¥ÎèÑ: \(note.level)")
                .font(.footnote)
                .fontWeight(.semibold)
                .foregroundColor(.black.opacity(0.5))
        }
        .padding(13)
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(Color.red.opacity(0.06)) // Ï†ÑÏ≤¥ Î∞ïÏä§ Î∞∞Í≤Ω
        .cornerRadius(8)
    }
}

// MARK: - Sub-component: NoteChoicesSection (ÏÑ†ÌÉùÏßÄ)
fileprivate struct NoteChoicesSection: View {
    let choices: [Choice] // QuizNote.Choice
    let userAnswer: String
    let correctAnswer: String

    var body: some View {
        VStack(spacing: 10) {
            ForEach(choices, id: \.label) { choice in
                ChoiceRow(
                    choice: choice,
                    isUserAnswer: choice.text == userAnswer,
                    isCorrectAnswer: choice.text == correctAnswer
                )
            }
        }
    }
}

fileprivate struct ChoiceRow: View {
    let choice: Choice
    let isUserAnswer: Bool
    let isCorrectAnswer: Bool

    private var backgroundColor: Color {
        if isCorrectAnswer { return .green }
        if isUserAnswer { return .red } // isCorrectAnswerÍ∞Ä falseÏùº ÎïåÎßå Îπ®Í∞ÑÏÉâ (ÌãÄÎ¶∞ Îãµ)
        return .clear
    }

    private var foregroundColor: Color {
        if isCorrectAnswer || isUserAnswer { return .white }
        return .primary
    }
    
    private var strokeColor: Color {
        if isCorrectAnswer { return .green }
        if isUserAnswer { return .red }
        return .gray.opacity(0.5)
    }

    var body: some View {
        HStack {
            Text(choice.label)
                .font(.subheadline)
                .fontWeight(.medium)
                .frame(width: 20, height: 20)
                .background(Circle().fill(backgroundColor))
                .foregroundColor(foregroundColor)
                .overlay(Circle().stroke(strokeColor, lineWidth: 1))
            
            Text(choice.text)
                .font(.subheadline)
            
            Spacer()
        }
        .padding(13)
        .background(.white)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(strokeColor, lineWidth: 3)
        )
        .cornerRadius(8)
    }
}


// MARK: - Sub-component: NoteExplanationSection (Ìï¥ÏÑ§)
fileprivate struct NoteExplanationSection: View {
    let explanation: String

    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Text("Ìï¥ÏÑ§")
                .font(.footnote)
                .fontWeight(.semibold)
            
            Text(explanation)
                .font(.footnote)
        }
        .padding(13)
        .frame(maxWidth: .infinity, alignment: .leading)
        .background(.white)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(.gray.opacity(0.2), lineWidth: 3)
        )
        .cornerRadius(8)
    }
}


// MARK: - Sub-component: NoteRecommendationsSection (Ï∂îÏ≤ú ÌïôÏäµ)
fileprivate struct NoteRecommendationsSection: View {
    let recommendations: [LearningRecommendation] // QuizNote.LearningRecommendation

    var body: some View {
        VStack(alignment: .leading, spacing: 13) {
            Text("Í¥ÄÎ†® ÌïôÏäµ ÏûêÎ£å")
                .font(.headline)
                .padding(.bottom, 10)

            ForEach(Array(recommendations.enumerated()), id: \.1.id) { index, rec in
                HStack {
                    Image(systemName: "book") // ÏïÑÏù¥ÏΩò Í≥†Ï†ï ÎòêÎäî recÏóêÏÑú Î∞õÍ∏∞
                        .resizable().scaledToFit().frame(width: 13, height: 13)
                        .fontWeight(.semibold).foregroundColor(.blue)
                        .padding(8).background(Color.blue.opacity(0.1)).cornerRadius(5)
                    
                    VStack(alignment: .leading) {
                        Text(rec.title).bold()
                            .font(.footnote)
                            .fontWeight(.semibold)
                        Text(rec.duration)
                            .font(.caption)
                            .fontWeight(.medium)
                            .foregroundColor(.black.opacity(0.5))
                    }
                }
                if index < recommendations.count - 1 {
                    Divider()
                }
            }
        }
    }
}

// MARK: - Sub-component: NoteMemoSection (Î©îÎ™®)
fileprivate struct NoteMemoSection: View {
    @Binding var memoText: String

    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text("ÎÇ¥ Î©îÎ™®")
                .font(.headline)

            TextEditor(text: $memoText)
                .frame(height: 80)
                .padding(10)
                .cornerRadius(10)
                .overlay(
                    RoundedRectangle(cornerRadius: 8)
                        .stroke(Color.gray.opacity(0.4), lineWidth: 1)
                )
        }
    }
}

// MARK: - Sub-component: NoteActionButtons (ÌïòÎã® Î≤ÑÌäº)
fileprivate struct NoteActionButtons: View {
    var onDismiss: () -> Void
    var onRetry: () -> Void

    var body: some View {
        HStack {
            Button(action: onDismiss) {
                Text("Î™©Î°ùÏúºÎ°ú")
                    .font(.subheadline).fontWeight(.semibold).foregroundStyle(.black)
            }
            .frame(maxWidth: .infinity).padding(14)
            .background(Color.gray.opacity(0.2)).cornerRadius(8)

            Button(action: onRetry) {
                Text("Îã§Ïãú ÌíÄÍ∏∞")
                    .font(.subheadline).fontWeight(.bold).foregroundStyle(.white)
            }
            .frame(maxWidth: .infinity).padding(14)
            .background(Color.blue).foregroundColor(.white).cornerRadius(8)
        }
    }
}

// MARK: - Preview
// QuizNoteÏôÄ ÌïòÏúÑ structÎì§Ïóê ÎåÄÌïú ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï†ïÏùò ÌïÑÏöî
extension Choice { // QuizResultView.swiftÏóê Ï†ïÏùòÎêú Choice ÏÇ¨Ïö© Í∞ÄÏ†ï
    static let sampleA = Choice(label: "A", text: "Î≥¥Í∏∞ A ÌÖçÏä§Ìä∏ (Ï†ïÎãµ)")
    static let sampleB = Choice(label: "B", text: "Î≥¥Í∏∞ B ÌÖçÏä§Ìä∏ (ÏÇ¨Ïö©Ïûê Ïò§Îãµ)")
    static let sampleC = Choice(label: "C", text: "Î≥¥Í∏∞ C ÌÖçÏä§Ìä∏")
    static let sampleD = Choice(label: "D", text: "Î≥¥Í∏∞ D ÌÖçÏä§Ìä∏")
}

extension LearningRecommendation { // QuizResultView.swiftÏóê Ï†ïÏùòÎêú LearningRecommendation ÏÇ¨Ïö© Í∞ÄÏ†ï
    static let sampleRec1 = LearningRecommendation(id: UUID(), title: "Í¥ÄÎ†® Í∞úÎÖê ÌïôÏäµÌïòÍ∏∞", duration: "15Î∂Ñ ÏΩîÏä§")
    static let sampleRec2 = LearningRecommendation(id: UUID(), title: "Ïú†ÏÇ¨ Î¨∏Ï†ú Îçî ÌíÄÏñ¥Î≥¥Í∏∞", duration: "10Î∂Ñ ÌÄ¥Ï¶à")
}

extension QuizNote { // QuizResultView.swiftÏóê Ï†ïÏùòÎêú QuizNote ÏÇ¨Ïö© Í∞ÄÏ†ï
    static var sampleForDetail: QuizNote {
        QuizNote(
            id: UUID(),
            question: "SwiftUIÏóêÏÑú ViewÎ•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÎäî Í∞ÄÏû• Í∏∞Î≥∏Ï†ÅÏù∏ Î∞©Î≤ïÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî? Í∑∏Î¶¨Í≥† Ïôú Í∑∏Îü∞Í∞ÄÏöî?",
            userAnswer: Choice.sampleB.text, // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†ÌÉùÌïú Ïò§Îãµ ÌÖçÏä§Ìä∏
            correctAnswer: Choice.sampleA.text, // Ï†ïÎãµ ÌÖçÏä§Ìä∏
            explanation: "SwiftUIÎäî ÏÑ†Ïñ∏Ï†Å ÌîÑÎ°úÍ∑∏ÎûòÎ∞ç Ìå®Îü¨Îã§ÏûÑÏùÑ Îî∞Î•¥Î©∞, @State, @Binding, @ObservedObject, @EnvironmentObject, @StateObjectÏôÄ Í∞ôÏùÄ ÌîÑÎ°úÌçºÌã∞ ÎûòÌçºÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Îç∞Ïù¥ÌÑ∞Ïùò Î≥ÄÍ≤ΩÏùÑ Í∞êÏßÄÌïòÍ≥† ÏûêÎèôÏúºÎ°ú ViewÎ•º Îã§Ïãú Î†åÎçîÎßÅÌï©ÎãàÎã§. Í∑∏ Ï§ë @StateÍ∞Ä Í∞ÄÏû• Í∏∞Î≥∏Ï†ÅÏù∏ Í∞í ÌÉÄÏûÖ ÏÉÅÌÉú Í¥ÄÎ¶¨ ÎèÑÍµ¨ÏûÖÎãàÎã§.",
            level: "Î≥¥ÌÜµ",
            category: "SwiftUI Í∏∞Ï¥à",
            dateAdded: "2025ÎÖÑ 5Ïõî 16Ïùº",
            choices: [Choice.sampleA, Choice.sampleB, Choice.sampleC, Choice.sampleD],
            recommendations: [LearningRecommendation.sampleRec1, LearningRecommendation.sampleRec2],
            memo: "StateÏôÄ ObservableObjectÏùò Ï∞®Ïù¥Î•º Î™ÖÌôïÌûà Ïù¥Ìï¥ÌïòÏûê."
        )
    }
}

#Preview {
    // DetailViewÎäî NavigationStack ÎÇ¥ÏóêÏÑú ÌÖåÏä§Ìä∏ÌïòÎäî Í≤ÉÏù¥ Ï¢ãÏäµÎãàÎã§.
    NavigationStack {
        WrongNoteDetailView(note: QuizNote.sampleForDetail)
            // .environmentObject(NoteViewModel(modelContext: ...)) // ViewModel ÌïÑÏöîÏãú Ï£ºÏûÖ
    }
}
